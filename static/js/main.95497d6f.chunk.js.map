{"version":3,"sources":["Components/Statistics/statistics.module.css","Components/buttons/Buttons.js","Components/SectionTitle/SectionTitle.js","Components/Statistics/Statistics.js","Components/SectionTitle/Notification.js","App.js","index.js"],"names":["module","exports","Controls","clickButton","options","map","option","type","onClick","Section","title","children","className","Statistics","good","neutral","bad","total","positiveFeedback","styles","span","Notification","message","App","useState","setGood","setNeutral","setBad","countTotal","key","Math","round","countPercent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,KAAO,2B,0ICgBVC,EAfE,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,QAAhB,OACf,8BACGA,EAAQC,KAAI,SAACC,GAAD,OACX,wBAEEC,KAAK,SACLC,QAAS,WACPL,EAAYG,IAJhB,SAMGA,GALIA,SCGEG,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,qCACE,oBAAIC,UAAU,QAAd,SAAuBF,IACtBC,M,gBCUUE,EAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,iBAA9B,OACjB,sBAAKN,UAAU,aAAf,UACE,uBAAMA,UAAWO,IAAOC,KAAxB,mBAAqCN,KACrC,uBAAMF,UAAWO,IAAOC,KAAxB,sBAAwCL,KACxC,uBAAMH,UAAWO,IAAOC,KAAxB,kBAAoCJ,KACpC,uBAAMJ,UAAWO,IAAOC,KAAxB,oBAAsCH,KACtC,uBAAML,UAAWO,IAAOC,KAAxB,gCACsBF,EADtB,YCJWG,EAHM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,mBAAGV,UAAU,UAAb,SAAwBU,K,MCIb,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOR,EAAP,KAAYW,EAAZ,KAsBMC,EAAa,WAEjB,OADcd,EAAOC,EAAUC,GAS/B,OACE,sBAAKJ,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,wDAEF,cAAC,EAAD,CAAUT,YAlCA,SAAA0B,GACd,OAAQA,GACN,IAAK,OACHJ,EAAQX,EAAO,GACf,MAEF,IAAK,UACHY,EAAWX,EAAU,GACrB,MAEF,IAAK,MACHY,EAAOX,EAAM,GACb,MAEF,QACE,SAmBgCZ,QApClB,CAAC,OAAQ,UAAW,SAsClC,cAAC,EAAD,CAASM,MAAM,aAAf,SACGkB,IAAe,EACd,cAAC,EAAD,CACEd,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,IACPV,iBAnBS,WACnB,GAAIJ,EAAO,EACT,OAAOgB,KAAKC,MAAOjB,EAAOc,IAAgB,KAiBhBI,KAGpB,cAAC,EAAD,CAAcV,QAAQ,2BCrDlCW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.95497d6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"statistics_span__xV4G3\"};","import React from 'react'\r\n\r\nconst Controls = ({ clickButton, options }) => (\r\n  <div>\r\n    {options.map((option) => (\r\n      <button\r\n        key={option}\r\n        type=\"button\"\r\n        onClick={() => {\r\n          clickButton(option);\r\n        }}>\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Controls;","import React from \"react\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    <h3 className='title'>{title}</h3>\r\n    {children}\r\n  </>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styles from './statistics.module.css'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedback }) => (\r\n  <div className=\"Statistics\">\r\n    <span className={styles.span}>Good: {good}</span>\r\n    <span className={styles.span}>Neutral: {neutral}</span>\r\n    <span className={styles.span}>Bad: {bad}</span>\r\n    <span className={styles.span}>Total: {total}</span>\r\n    <span className={styles.span}>\r\n      Positive feedback: {positiveFeedback} %\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) =>\r\n    <p className='message'>{message}</p>;\r\n\r\nexport default Notification;\r\n","import { useState } from 'react';\nimport Controls from './Components/buttons/Buttons';\nimport Section from './Components/SectionTitle/SectionTitle';\nimport Statistics from './Components/Statistics/Statistics';\nimport Notification from './Components/SectionTitle/Notification';\nimport './App.css';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const buttonNames = ['good', 'neutral', 'bad'];\n\n  const onClick = key => {\n    switch (key) {\n      case 'good':\n        setGood(good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n const  countTotal = () => {\n    const total = good + neutral + bad;\n    return total;\n  };\n\n const  countPercent = () => {\n    if (good > 0) {\n      return Math.round((good / countTotal()) * 100);\n    }\n  };\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Please leave feedback</p>\n        </header>\n        <Controls clickButton={onClick} options={buttonNames} />\n\n        <Section title=\"Statistics\">\n          {countTotal() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotal()}\n              positiveFeedback={countPercent()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}